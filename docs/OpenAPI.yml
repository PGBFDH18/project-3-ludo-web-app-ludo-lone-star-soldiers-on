openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AnorZaken7/LoneStarLudo/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/AnorZaken7/LudoMoves/1.0.0
info:
  description: API for the Ludo Lone Star game server.
  version: "2.0.0"
  title: Ludo Lone Star API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available to all users.
  - name: players
    description: Operations available to players of a game.
  #TODO: "users" now encompases both registered and unregistered users...
  # ... add "anyone" tag for operations that require no auth?

paths:
  /ludo:
    get:
      operationId: ludoServerInfo
      tags:
        - users
      summary: Server state / info.
      description: TODO
      responses:
        '418':
          description: Coffe? U no can has!
          #TODO: send back some server statistics instead

  /ludo/user:
    get:
      operationId: ludoListUsers
      tags:
        - users
      summary: Get a list of users, optionally filtered.
      parameters:
        - name: userName
          in: query
          description: UserName of a user to search for.
          schema:
            type: string
      responses:
        '200':
          description: A list of user ids matching the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: No matching user(s) exist. (For searches only.)
    
    post: # creating a new resource
      operationId: ludoCreateUser
      tags:
        - users
      summary: Creates a new user.
      parameters:
        - name: UserName
          in: header
          description: The UserName of the user to create (need to be unique).
          schema:
            type: string
      responses:
        '201':
          description: User created (see Location header).
          #TODO: add auth token?
        '400':
          description: Missing or empty UserName parameter.
        '409':
          description: UserName was not unique.
        '422':
          description: Non-acceptable UserName parameter (see body for details).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          #TODO: add detailed response, e.g. too short/long, profane, etc.
  
  /ludo/user/{userId}:
    parameters:
      - $ref: '#/components/parameters/userIdPath'
    
    get:
      operationId: ludoGetUser
      tags: 
        - users
      summary: Get information about a user.
      responses:
        '200':
          description: A UserInfo object with information about the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '404':
          description: No such user exists.
      #TODO: add more info / statistics here? or add sub-paths with more info?
    
    #put/patch: ...
    #TODO: add ability to make user changes - requires some form of auth!
    
    #delete: ...
    #TODO: should be a delete operation - requires some form of auth!

  /ludo/lobby:
    get:
      operationId: ludoListLobbies
      tags:
        - users
      summary: Lists Ludo lobbies.
      description: TODO
      parameters:
        - name: show
          in: query
          description: |
            Filters lobbies based on how full they are;
            open - Show open only.
            full - Show full only.
            all - Show both open and full.
            penultimate - Show only lobbies with exactly one unoccupied slot.
          schema:
            type: string
            default: open
            enum: [open, full, all, penultimate]
        - name: userId
          in: query
          description: >
            Filter to lobbies where at least one specified user is present
            (e.g. your friends).
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: A JSON array of LobbyListEntry objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LobbyListEntry'
        '400':
          description: bad input parameter
        '404':
          description: One or more of the specified players does not exists.

    post: # creating a resource
      operationId: ludoCreateLobby
      tags:
        - users
      summary: Creates a new lobby.
      description: Creates a new lobby and joins it as player 0.
      requestBody:
        description: Information required to create a new lobby.
        required: true
        content:
          application/JSON:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateLobby'
                - $ref: '#/components/schemas/LoadLobby'
      responses:
        '201': # Created
          description: >
            Returns the id of the newly created game in the Location header.
            The creator of a lobby is always assigned to slot 0 when creating a new game.
        '400':
          description: Player not specified.
        '404':
          description: No such user exists (userId included).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: SlotCount is out of range or invalid save data.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        #TODO: some form of auth?
  
  /ludo/lobby/{gameId}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
    
    get:
      operationId: ludoGetLobby
      tags: 
        - users
      summary: Get lobby information.
      description: Which players are in the game, can the game still be joined, etc.
      responses:
        '200':
          description: A LobbyInfo object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyInfo'
        '404':
          description: No such game exists.
    
    patch: # we are amending a user (player/spectator) to the lobby resource
      operationId: ludoJoinLobby
      tags:
        - users
      summary: Join a game lobby.
      description: Adds the specified player to a game lobby, returning an auto assigned slot index.
      parameters: 
        - name: UserId
          in: header
          description: The user who wants to join.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: >
            Game joined. Here's your slot index for this game,
            or -1 if not automatically assigned to any slot.
            (Also sent if the player has already joined this game.)
          content:
            text/plain:
              schema:
                type: integer
                format: int32
                minimum: -1
                maximum: 3
          #TODO: return game auth token
        '400':
          description: Player not specified.
        '404':
          description: No such game and / or player exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409': # "This response is sent when a request conflicts with the current state of the server."
          description: Unable to join game
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
          #TODO: supply exact reason in body (Error object)
    
    post: # creates (in-)game resource
      operationId: ludoStartGame
      tags: 
        - players
      summary: Start game.
      description: |
        Starts the game.
        Requires lobby state.
        Requires at least two players.
        Requires that all players are ready.
      responses:
        '201':
          description: Game started (see Location header).
        '404':
          description: No such game exists.
        '409':
          description: Unable to start game.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response
    
    delete: # should be idempotent (does the described behaviour qualify as idempotent..?)
      operationId: ludoLeaveLobby
      tags:
        - players
      summary: Leave lobby.
      description: When the last player leaves, the lobby itself is deleted.
      parameters: 
        - name: UserId
          in: header
          description: The player who wants to leave.
          schema:
            type: string
          required: true
      responses:
        '204':
          description: >
            User has either been removed from the lobby (change),
            or user wasn't a member of this lobby (no change).
        '400':
          description: UserId not specified.
        '404':
          description: No such game and / or user exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Game is not in the setup phase.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response

  /ludo/lobby/{gameId}/{slot}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/slotPath'
    
    get:
      operationId: ludoGetPlayerReady
      tags:
        - users
      summary: Get player and ready state for the specified lobby slot.
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/PlayerReady'
        '400':
          description: Bad slot index.
        '404':
          description: No such game or slot exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Game not in setup stage (i.e. already in progress / ended).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response

    put: # we are replacing the content of the slot resource.
      operationId: ludoSetSlotPlayer
      tags:
        - players
      summary: Move a user to this slot.
      description: >
        User must already be in the lobby and the slot needs to be empty
        or occupied by someone whom the user has permission to evict.
        (A reservation grants permission to evict those without a reservation.)
        Use slot -1 to evict yourself.
      parameters:
        - name: UserId
          in: header
          description: User to move to this slot.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK - Also sent if no change occurred.
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / user / slot exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Unable to claim slot.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response
    
    patch: # we are modifying the ready property of the slot resource.
      operationId: ludoSetSlotReady
      tags:
        - players
      summary: Sets the ready status of a slot/player.
      description: All players in a lobby need to ready up before a game can start.
      requestBody:
        description: The user occupying this slot to and their new ready status.
        required: true
        content:
          application/JSON:
            schema:
              $ref: '#/components/schemas/PlayerReady'
      responses:
        '204':
          description: OK - Also sent if no change occurred.
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / user / slot exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: >
            Unable to set ready status
            (e.g. the user found in this slot was not the user specified).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response
  
  /ludo/board:
    get:
      operationId: ludoGetBoardInfo
      tags:
        - users
      summary: Get a BoardInfo object.
      description: Extrapolates standard board information from a boardLength.
      parameters:
        - name: length
          in: query
          description: Length of the shared competative track around the board.
          schema:
            type: integer
            format: int32
            minimum: 24
            maximum: 80
            default: 40
      responses:
        '200':
          description: A BoardInfo object.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/BoardInfo'
        '400':
          description: Bad length parameter.
  
  /ludo/board/{gameId}:
    parameters: 
      - $ref: '#/components/parameters/gameIdPath'
    
    get:
      operationId: ludoGetBoardState
      tags:
        - users
      summary: Get current board state.
      description: TODO # <----------------------------------
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/BoardState'
        '404':
          description: No such game exists.
        '409':
          description: Game is not in the ingame phase.
    
    # TODO...
    # put: # we are replacing the games board-state resource.
    #   operationId: ludoSetBoardState
    #   tags:
    #     - players
    #   summary: Set the BoardState.
    #   description: Setting the BoardState can only be done while still in lobby.
    #   requestBody:
    #     description: The board state (BoardState object containing PieceDistances).
    #     required: true
    #     content:
    #       application/JSON:
    #         schema:
    #           $ref: '#/components/schemas/BoardState'
    #   responses:
    #     '204':
    #       description: OK
    #     '400':
    #       description: Bad input parameter.
    #     '404':
    #       description: No such game exists.
    #     '409':
    #       description: Game has already started (perhaps even ended).
    #   #TODO: require game auth token + 401 & 403 response
  
  /ludo/game:
    get:
      operationId: ludoListGames
      tags:
        - users
      summary: Returns a list of games.
      description: Only returns ingame games by default.
      parameters:
        - name: show
          in: query
          description: Filter the game list (ingame, finished, all).
          schema:
            type: string
            enum: [ingame, finished, all]
            default: ingame
        - name: gameId
          in: query
          description: |
            Search for a specific game (implies show=all).
            Note that userId is ignored if gameId is specified.
          schema:
            type: string
        - name: userId
          in: query
          description: |
            Search for all games with this user.
            Note that userId is ignored if gameId is specified.
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of GameListEntry objects.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/GameListEntry'
        '400':
          description: bad input parameter
        '404':
          description: No such game or user exists (only in searches).
  
  /ludo/game/{gameId}:
    parameters: 
      - $ref: '#/components/parameters/gameIdPath'
    
    get:
      operationId: ludoGetCurrent
      tags:
        - users
      summary: Get current turn, player (slot index), and die roll.
      description: |
        The state of a game (TurnCount, CurrentPlayer, CurrentDieRoll).
        Combine this with board state and lobby data to have a complete save.
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/TurnSlotDie'
        '404':
          description: No such game exists.
        '409':
          description: Game is not in the ingame phase.
    
    delete: # shoild be idempotent. Is it..?
      operationId: ludoConcede
      tags:
        - players
      summary: Concede.
      description: |
        Irrevocably hands over control of your pieces to a bot.
        If only one human player remains after a concede, that player is declared the winner and the game ends.
        (wip)
      parameters:
        - name: UserId
          in: header
          required: true
          description: |
            The userId of the conceding player.
          schema:
            type: string
      responses:
        '204':
          description: >
            OK.
            This is also sent if the user isn't part of this lobby,
            or has already conceeded, or the game has already ended.
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / user exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Not ingame phase.
      #TODO: require game auth token + 401 & 403 response
  
  /ludo/game/{gameId}/{slot}:
    #TODO: make turn counter part of the path.
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/slotPath'
    # get: decision making info
    # post: PassTurn!
    # delete: concede.
    
    get:
      operationId: ludoGetTurnInfo
      tags:
        - users
      summary: Get a TurnInfo object for the current player (slot index).
      description: The TurnInfo object contains information on the current player's available moves.
      responses:
        '200':
          description: OK
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/TurnInfo'
        '400':
          description: bad input parameter
        '404':
          description: No such game / slot exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Slot does not correspond to the current player. (It's not your turn.)
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
    
    # TODO: if we had turn as part of the path we could create a "passed" resource or patch the turn status to "passed".
    # ...it would also simplify caching a lot!
    post:
      operationId: ludoPassTurn
      tags:
        - players
      summary: Ends the turn without moving.
      description: >
        Passes the turn over to the next player; unless the player has a bonus turn ("IsLucky"),
        in which case the current player remains active and only the die is re-rolled.
        Passing is by default only allowed if no move is possible on the current turn.
      responses:
        '204':
          description: OK
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / slot exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot pass the turn (e.g. the rules do not allow it).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response
    
  /ludo/game/{gameId}/{slot}/{pieceIndex}:
    parameters:
      - $ref: '#/components/parameters/gameIdPath'
      - $ref: '#/components/parameters/slotPath'
      - $ref: '#/components/parameters/pieceIndexPath'
    # get: PieceInfo!
    # post: MovePiece! <---- patch or post?
    
    get:
      operationId: ludoGetPieceInfo
      tags:
        - users
      summary: Get a PieceInfo object.
      description: |
        A PieceInfo object describing state, movability, and collision / blocking for the piece.
        Requires that the slot index corresponds to the current player.
      responses:
        '200':
          description: A PieceInfo object.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/PieceInfo'
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / slot / piece exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Unable to acquire piece info for this slot-piece (at this time).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
    
    post: # we are "creating" a new turn
      operationId: ludoMovePiece
      tags: 
        - players
      summary: Moves the piece.
      description: |
        Moves the piece according to the current die roll.
        Requires that the slot index corresponds to the current player and that pieceIndex is a movable piece.
      responses:
        '204':
          description: OK
        '400':
          description: Bad input parameter.
        '404':
          description: No such game / slot / piece exists.
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Unable to move piece (e.g. not your turn).
          content:
            application/JSON:
              schema:
                $ref: '#/components/schemas/Error'
      #TODO: require game auth token + 401 & 403 response
  
  # This path is not required to play, it just allows anyone to query moves for an arbitrary gamestate.
  # /ludo/calculate:
  #   get:
  #     tags:
  #       - users
  #     summary: Calculates possible moves for a player at a given gamestate.
  #     description: >
  #       By passing in a gamestate, you can get a description of how a players pieces can move on the board - as a PieceInfo array.
  #     operationId: ludoCalculateMoves
  #     parameters:
  #       - name: slot
  #         in: query
  #         required: true
  #         description: The player (slot index) to calculate moves for.
  #         schema:
  #           type: integer
  #           format: int32
  #           minimum: 0
  #           maximum: 3
  #       - name: roll
  #         in: query
  #         required: true
  #         description: The die roll to calculate moves for.
  #         schema:
  #           type: integer
  #           format: int32
  #           minimum: 1
  #           maximum: 6
  #       - name: distances
  #         in: query
  #         required: true
  #         description: |
  #           The state of the board in the form of an array of player relative board indexes ("distances"), starting with all pieces (0-3) for player 0, then all pieces for player 1, etc.
  #           (Length of the array is thus PlayerCount * PieceCount.)
  #         schema:
  #           type: array
  #           items:
  #             type: integer
  #             format: int32
  #             minimum: 0
  #             maximum: 90
  #     responses:
  #       '200':
  #         description: |
  #           Array of PieceInfo objects describing distance etc. for all of the current players pieces (0-3).
  #           All of the current players possible moves (or lack there of) can be inferred from this array.
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/PieceInfo'
  #       '400':
  #         description: bad input parameter

components:
  parameters:
    userIdPath:
      name: userId
      in: path
      required: true
      description: A user id.
      schema:
        type: string
    gameIdPath:
      name: gameId
      in: path
      required: true
      description: Id of a game.
      schema:
        type: string
    slotPath:
      name: slot
      in: path
      required: true
      description: Game specific slot.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 3
    pieceIndexPath:
      name: pieceIndex
      in: path
      required: true
      description: Player specific pieceIndex.
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 3
  
  schemas:
    Error:
      type: object
      properties:
        code:
          description: An error code.
          type: integer
          format: int32
        desc:
          description: Optional human readable description.
          type: string
    
    GameState:
      type: string
      enum: [setup, ingame, finished]
      description: The state of a game / lobby.
    
    LobbyAccess:
      type: string
      enum: [public, unlisted, friendsOnly, inviteOnly, reservations]
      description: |
        Setting that determines the rules for joining a lobby.
        public - game is publicly listed and anyone can join.
        unlisted - anyone with the gameId can join, but game is not publicly listed.
        friendsOnly - game is publicly listed, but only friends can join. (wip)
        inviteOnly - game is not publicly listed and can only be joined by invite. (wip)
        reservations - public game where anyone can join; however slotes are pre-associated
        with playerIds such that if those players join they are automatically granted their pre-associated
        index, vacating any previous occupant from that slot. (wip)
    
    CreateLobby:
      type: object
      description: Information required to create a new lobby.
      required:
        - userId
      properties:
        userId:
          description: The user creating the lobby.
          type: string
        slots:
          description: Number of slots.
          type: integer
          format: int32
          minimum: 2
          maximum: 4
          default: 4
        access:
          $ref: '#/components/schemas/LobbyAccess'
        reservations:
          description: An array of all slot reservations in this lobby.
          type: array
          items:
            $ref: '#/components/schemas/LobbyReservation'

    LoadLobby:
      type: object
      description: Information required to create a lobby from a saved game.
      required:
        - save
      properties:
        save:
          $ref: '#/components/schemas/GameSave'
        access:
          $ref: '#/components/schemas/LobbyAccess'
        strict:
          type: boolean
          description: >
            Reservations are always generated for the old participants when loading a save.
            This determines if those reservations are strict or relaxed.
          default: false

    UserInfo:
      type: object
      properties:
        userName:
          type: string
        #TODO: add more info; dateJoined etc...
    
    PlayerReady:
      type: object
      required:
        - userId
        - ready
      properties:
        userId:
          type: string
        ready:
          type: boolean
    
    LobbyReservation:
      type: object
      required:
        - player
        - slot
      properties:
        player:
          type: string
        slot:
          description: Slot index, or -1 if the reservation is slot agnostic.
          type: integer
          format: int32
          minimum: -1
          maximum: 3
        strict:
          type: boolean
          description: >
            If the reservation is strict, then no other player may take this slot.
            Conversely a relaxed reservation behaves like a normal slot, except
            that a player that has a reservation to may evict non-reserved players
            to claim it.
          default: false
    
    LobbyListEntry:
      type: object
      properties:
        gameId:
          type: string
        access:
          $ref: '#/components/schemas/LobbyAccess'
        slots:
          description: >
            An array of players in slot index order.
            Empty slots are represented by empty array items.
          type: array
          items:
            type: string
        others:
          description: >
            An array of players that are not currently assigned to any slot.
          type: array
          items:
            type: string
        #TODO: add reservation info <-------------------------
    
    LobbyInfo:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/GameState'
        access:
          $ref: '#/components/schemas/LobbyAccess'
        slots:
          description: >
            An array of players and ready status in slot index order.
            Empty slots are represented by empty array items.
          type: array
          items:
            $ref: '#/components/schemas/PlayerReady'
        others:
          description: >
            An array of players that are not currently assigned to any slot.
          type: array
          items:
            type: string
        reservations:
          description: An array of all slot reservations in this lobby.
          type: array
          items:
            $ref: '#/components/schemas/LobbyReservation'
        #TODO: add more properties..?
    
    GameListEntry:
      type: object
      properties:
        gameId:
          type: string
        state:
          $ref: '#/components/schemas/GameState'
        winner:
          type: string
          description: Winning player (omitted / empty if no winner has been decided).
        slots:
          type: array
          description: A slot array of userIds (or null for empty slots).
          items:
            type: string
        #TODO: add more properties..?
    
    StartEndPos:  # min-max values derive from min-max of boardLength.
      type: object
      required:
        - startPos
        - endZonePos
      properties:
        startPos:
          type: integer
          description: |
            Absolute board position for where a player places their piece when they take it out of their base.
          format: int32
          minimum: 0
          maximum: 60
        endZonePos:
          type: integer
          description: |
            Absolute board position that corresponds to the first end-zone position of a player.
            Any position larger than or equal to this position corresponds to an endzone position.
          format: int32
          minimum: 24
          maximum: 110
    
    BoardInfo:  # default values are for a standard sized Ludo board.
      type: object
      required:
        - boardLength
      properties:
        boardLength:
          type: integer
          description: |
            Length of the competative shared track around the board (does not include the safe end-zones leading to the goal).
            Must be a multiple of 8.
          format: int32
          minimum: 24
          maximum: 80
          default: 40
        endZoneLength:
          type: integer
          description: |
            Length of the collision-free end-zones leading to the goal (goal square included). This is usually just boardLength / 8.
            The goal distance - the player relative position / distance a piece must move to reach the goal - is simply boardLength + endZoneLength.
            Thus a piece is in its (safe) end-zone if its distance is greater than boardLength, but smaller than the goal distance.
          format: int32
          minimum: 3
          maximum: 10
          default: 5
        startEndPositions:
          type: array
          description: |
            The absolute start positions, paired with the absolute position of the first square of the endzone, for each player.
          items:
            $ref: '#/components/schemas/StartEndPos'
        #TODO add more properties..?
    
    PieceDistances:
      type: array
      description: |
        An array of piece distances (for a player's pieces).
        These player relative board positions describe how far a piece has moved.
        To translate them into absolute board positions, the length of the board and the index of the player must also be known.
        Assuming the distance is less than the board length (i.e. if the piece is still on the shared competative track) the formula looks like so;
        position = (distance + slot * boardLength / 4) % boardLength
      items:
        type: integer
        format: int32
        minimum: 0
        maximum: 90 # based on maximum allowed boardLength
    
    BoardState:
      type: array
      description: An array of piece distance arrays (one for each player, i.e. slot index).
      items:
        $ref: '#/components/schemas/PieceDistances'
    
    TurnSlotDie:
      type: object
      required:
        - turn
        - player
        - die
      properties:
        turn:
          type: integer
          description: Which turn the game is on.
          format: int32
          minimum: 0
        slot:
          type: integer
          description: Slot index of current player.
          format: int32
          minimum: 0
          maximum: 3
        die:
          type: integer
          description: Die roll for the current player / turn.
          format: int32
          minimum: 1
          maximum: 6
    
    PlayerSlot:
      type: object
      properties:
        player:
          type: string
        slot:
          description: Slot index, or -1 if not assigned to any slot.
          type: integer
          format: int32
          minimum: -1
          maximum: 3
    
    LobbySave:
      type: object
      required:
        - players
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerSlot'
    
    GameSave:
      type: object
      required:
        - board
        - current
        - lobby
      properties:
        board:
          $ref: '#/components/schemas/BoardState'
        current:
          $ref: '#/components/schemas/TurnSlotDie'
        lobby:
          $ref: '#/components/schemas/LobbySave'
        #TODO is any data missing to make this a complete game save?
    
    TurnInfo:
      type: object
      required:
        - pieces
      properties:
        canPass:
          type: boolean
          description: >
            Can the player pass the current turn?
            (Can be omitted if false.)
        isLucky:
          type: boolean
          description: >
            Will the player get a bonus turn after the current one?
            (Can be omitted if false.)
        pieces:
          type: array
          description: A JSON array of PieceInfo objects.
          items:
            $ref: '#/components/schemas/PieceInfo'
    
    PieceInfo:
      type: object
      required:
        - distance
      properties:
        distance:
          type: integer
          format: int32
          minimum: 0
          description: |
            How far this piece has moved (player-relative board index).
            Zero if it is currently in the players base.
        position:
          type: integer
          format: int32
          minimum: 0
          description: |
            Where this piece is on the board (absolute board index).
            Omitted if the piece isn't on the board, i.e. if it has reached the goal or is in the players base.
            (Distance is non-zero and position is omitted == piece has reached the goal.)
        moved:
          type: integer
          format: int32
          minimum: -1 # if the move puts it at the goal
          description: |
            Where this piece will be on the board if it is moved.
            Omitted if the piece cannot move.
        collision:
          $ref: '#/components/schemas/SlotPiece'
    
    SlotPiece:
          type: object
          required:
            - slot
            - piece
          description: |
            A slot and piece tuple for describing the content of a target square on the board.
            For example used to describe what a piece would collide with if it were to be moved.
            Does not imply that a move is legal!
            Omitted if the target square is empty / there is no collision.
          properties:
            slot:
              type: integer
              format: int32
              minimum: 0
              maximum: 3
              description: Zero-based slot index.
            piece:
              type: integer
              format: int32
              minimum: 0
              maximum: 3
              description: Zero-based piece index.
